basePath: /api/v1
definitions:
  model.List:
    properties:
      id:
        example: 1
        type: integer
      imageURL:
        example: /assets/images/hfhu39Hfeu.png
        type: string
      name:
        example: List
        type: string
      ownerId:
        example: 1
        type: integer
      url:
        example: list-1
        type: string
    type: object
  model.LoginUser:
    properties:
      email:
        example: johndoe@gmail.com
        type: string
      password:
        example: SuperSecret69
        type: string
    type: object
  model.Task:
    properties:
      createdAt:
        example: 2022-06-29 13:27
        type: string
      createdById:
        example: 1
        type: integer
      description:
        example: This is a great task!
        type: string
      id:
        example: 1
        type: integer
      isDone:
        example: true
        type: boolean
      listId:
        example: 1
        type: integer
      title:
        example: Task
        type: string
      url:
        example: task-1
        type: string
    type: object
  model.User:
    properties:
      email:
        example: johndoe@gmail.com
        type: string
      id:
        example: 1
        type: integer
      isEnabled:
        example: true
        type: boolean
      name:
        example: John Doe
        type: string
      password:
        example: secret
        type: string
    type: object
  util.Error:
    properties:
      error:
        example: An unknown error occurred.
        type: string
    type: object
  util.Success:
    properties:
      message:
        example: Success!
        type: string
    type: object
host: localhost:8080
info:
  contact:
    email: oliver.mrakovics@gmail.com
    url: https://0l1v3rr.github.io
  description: This is the API of the advanced ToDo application
  license:
    name: MIT
    url: https://opensource.org/licenses/MIT
  title: Advanced ToDo application
  version: "1.0"
paths:
  /files:
    post:
      description: Uploads a new file into the images/ folder
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/util.Success'
        "400":
          description: If the file is not valid.
          schema:
            $ref: '#/definitions/util.Error'
        "401":
          description: If the user is not logged in.
          schema:
            $ref: '#/definitions/util.Error'
        "500":
          description: If there was a file error.
          schema:
            $ref: '#/definitions/util.Error'
      summary: Upload file
      tags:
      - File endpoints
  /lists:
    post:
      consumes:
      - application/json
      description: Creates a new list
      parameters:
      - description: Task to create
        in: body
        name: list
        required: true
        schema:
          $ref: '#/definitions/model.List'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/model.List'
        "400":
          description: If the list is not valid.
          schema:
            $ref: '#/definitions/util.Error'
        "401":
          description: If the user is not logged in.
          schema:
            $ref: '#/definitions/util.Error'
        "500":
          description: If there was a db error.
          schema:
            $ref: '#/definitions/util.Error'
      summary: Create list
      tags:
      - List endpoints
  /lists/{url}:
    get:
      description: Returns all the lists the specified user has
      parameters:
      - description: list URL
        in: path
        name: url
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/model.List'
        "401":
          description: If the user is not logged in.
          schema:
            $ref: '#/definitions/util.Error'
        "403":
          description: If the user doesn't have permission to view the list.
          schema:
            $ref: '#/definitions/util.Error'
        "404":
          description: If the list does not exist.
          schema:
            $ref: '#/definitions/util.Error'
      summary: Get lists
      tags:
      - List endpoints
  /lists/user/{userId}:
    get:
      description: Returns all the lists the specified user has
      parameters:
      - description: user ID
        in: path
        name: userId
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/model.List'
            type: array
        "400":
          description: If the id is not valid.
          schema:
            $ref: '#/definitions/util.Error'
        "401":
          description: If the user is not logged in.
          schema:
            $ref: '#/definitions/util.Error'
        "403":
          description: If the user doesn't have permission to view the list.
          schema:
            $ref: '#/definitions/util.Error'
        "500":
          description: If there was a db error.
          schema:
            $ref: '#/definitions/util.Error'
      summary: Get lists
      tags:
      - List endpoints
  /login:
    post:
      consumes:
      - application/json
      description: Logs in a user and saves the JWT in cookies.
      parameters:
      - description: User to log in
        in: body
        name: user
        schema:
          $ref: '#/definitions/model.LoginUser'
      produces:
      - application/json
      responses:
        "200":
          description: If the login was successful.
          schema:
            $ref: '#/definitions/util.Success'
        "400":
          description: If the provided user is not valid.
          schema:
            $ref: '#/definitions/util.Error'
        "403":
          description: If the password is incorrect or the user is not activated.
          schema:
            $ref: '#/definitions/util.Error'
        "404":
          description: If the user with the specified email does not exist.
          schema:
            $ref: '#/definitions/util.Error'
      summary: Login
      tags:
      - User endpoints
  /logout:
    post:
      description: Logs out the currently logged-in user.
      produces:
      - application/json
      responses:
        "200":
          description: If the logout was success.
          schema:
            $ref: '#/definitions/util.Success'
      summary: Logout
      tags:
      - User endpoints
  /register:
    post:
      consumes:
      - application/json
      description: Registers a new user into the database.
      parameters:
      - description: User to register
        in: body
        name: user
        schema:
          $ref: '#/definitions/model.User'
      produces:
      - application/json
      responses:
        "201":
          description: If the user has been created successfully.
          schema:
            $ref: '#/definitions/model.User'
        "400":
          description: If the provided user is not valid.
          schema:
            $ref: '#/definitions/util.Error'
        "409":
          description: If the specified email already exists.
          schema:
            $ref: '#/definitions/util.Error'
        "500":
          description: If there was a server error while creating the user.
          schema:
            $ref: '#/definitions/util.Error'
      summary: Registration
      tags:
      - User endpoints
  /tasks/{id}:
    delete:
      description: Deletes the task
      parameters:
      - description: task ID
        in: path
        name: id
        required: true
        type: integer
      responses:
        "202":
          description: Accepted
          schema:
            $ref: '#/definitions/model.Task'
        "400":
          description: If the id is not valid.
          schema:
            $ref: '#/definitions/util.Error'
        "401":
          description: If the user is not logged in.
          schema:
            $ref: '#/definitions/util.Error'
        "403":
          description: If the user has no permission to do this.
          schema:
            $ref: '#/definitions/util.Error'
        "404":
          description: If the task does not exist.
          schema:
            $ref: '#/definitions/util.Error'
        "500":
          description: If there was a db error.
          schema:
            $ref: '#/definitions/util.Error'
      summary: Delete task
      tags:
      - Task endpoints
    patch:
      description: Changes the task status to its opposite value
      parameters:
      - description: task ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "202":
          description: Accepted
          schema:
            $ref: '#/definitions/model.Task'
        "400":
          description: If the id is not valid.
          schema:
            $ref: '#/definitions/util.Error'
        "401":
          description: If the user is not logged in.
          schema:
            $ref: '#/definitions/util.Error'
        "403":
          description: If the user has no permission to do this.
          schema:
            $ref: '#/definitions/util.Error'
        "404":
          description: If the task doesn't exist.
          schema:
            $ref: '#/definitions/util.Error'
      summary: Change task status
      tags:
      - Task endpoints
    post:
      consumes:
      - application/json
      description: Creates a new task in the db
      parameters:
      - description: Task to create
        in: body
        name: task
        required: true
        schema:
          $ref: '#/definitions/model.Task'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/model.Task'
        "400":
          description: If the task is not valid.
          schema:
            $ref: '#/definitions/util.Error'
        "401":
          description: If the user is not logged in.
          schema:
            $ref: '#/definitions/util.Error'
        "403":
          description: If the user doesn't have permission to create task in the list.
          schema:
            $ref: '#/definitions/util.Error'
        "404":
          description: If the list with the specified ID does not exist.
          schema:
            $ref: '#/definitions/util.Error'
        "500":
          description: If there was a db error.
          schema:
            $ref: '#/definitions/util.Error'
      summary: Create task
      tags:
      - Task endpoints
    put:
      consumes:
      - application/json
      description: Edits the task
      parameters:
      - description: Task to create
        in: body
        name: task
        required: true
        schema:
          $ref: '#/definitions/model.Task'
      - description: task ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "202":
          description: Accepted
          schema:
            $ref: '#/definitions/model.Task'
        "400":
          description: If the task or the id is not valid.
          schema:
            $ref: '#/definitions/util.Error'
        "401":
          description: If the user is not logged in.
          schema:
            $ref: '#/definitions/util.Error'
        "403":
          description: If the user has no permission to do this.
          schema:
            $ref: '#/definitions/util.Error'
        "404":
          description: If the task does not exist.
          schema:
            $ref: '#/definitions/util.Error'
        "500":
          description: If there was a db error.
          schema:
            $ref: '#/definitions/util.Error'
      summary: Edit task
      tags:
      - Task endpoints
  /tasks/{url}:
    get:
      description: Returns the task with the specified url
      parameters:
      - description: task URL
        in: path
        name: url
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/model.Task'
        "401":
          description: If the user is not logged in.
          schema:
            $ref: '#/definitions/util.Error'
        "403":
          description: If the user doesn't have permission to view the list the task
            is in.
          schema:
            $ref: '#/definitions/util.Error'
        "404":
          description: If the task doesn't exist.
          schema:
            $ref: '#/definitions/util.Error'
      summary: Get tasks by URL
      tags:
      - Task endpoints
  /tasks/list/{id}:
    get:
      description: Returns all the tasks in the specified list
      parameters:
      - description: list ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/model.Task'
            type: array
        "400":
          description: If the id is not valid.
          schema:
            $ref: '#/definitions/util.Error'
        "401":
          description: If the user is not logged in.
          schema:
            $ref: '#/definitions/util.Error'
        "403":
          description: If the user doesn't have permission to view the list.
          schema:
            $ref: '#/definitions/util.Error'
        "404":
          description: If the list with this id does not exist.
          schema:
            $ref: '#/definitions/util.Error'
        "500":
          description: If there was a db error..
          schema:
            $ref: '#/definitions/util.Error'
      summary: Get list tasks
      tags:
      - Task endpoints
  /user:
    get:
      description: Returns the currently logged-in user.
      produces:
      - application/json
      responses:
        "200":
          description: If the user is logged in.
          schema:
            $ref: '#/definitions/model.User'
        "401":
          description: If the user is not logged in.
          schema:
            $ref: '#/definitions/util.Error'
      summary: Logged In User
      tags:
      - User endpoints
swagger: "2.0"
